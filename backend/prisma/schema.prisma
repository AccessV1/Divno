// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

//  we can add things as we go
model User {
  id              String           @id @default(uuid())
  email           String           @unique
  username        String           @unique
  firstName       String
  lastName        String
  phoneNumber     Int?             @unique
  password        String?
  createdAt       DateTime         @default(now())
  profilePicture  String
  RefreshToken    RefreshToken[]
  ServiceProvider ServiceProvider?
  Customer        Customer?
}

model RefreshToken {
  id        String   @id @default(uuid())
  user      User     @relation(fields: [userId], references: [id])
  userId    String
  token     String   @unique
  createdAt DateTime @default(now())
  expiresAt DateTime
}

model Service {
  service_id           String   @id @default(uuid())
  service_name         String
  location_id          String
  service_description  String
  service_type_id      String
  service_price        String
  service_availibility DateTime
  service_license      String
  service_images       String
  provider_id          String
  menu_id              String

  serviceImages ServiceImages[]
  menu          Menu            @relation(fields: [menu_id], references: [menu_id])
}

model ServiceProvider {
  provider_id      String @id @default(uuid())
  user_id          String @unique
  provider_name    String
  provider_email   String
  provider_contact String
  provider_rating  Int
  location_id      String

  user     User     @relation(fields: [user_id], references: [id])
  location Location @relation(fields: [location_id], references: [location_id])
}

model Location {
  location_id      String @id @default(uuid())
  location_address String
  location_city    String
  location_zip     Int
  location_country String
  location_state   String

  ServiceProvider ServiceProvider[]
  Orders          Orders[]
}

model Orders {
  order_id          String @id @default(uuid())
  order_description String
  order_price       String
  order_list        String
  order_status      String
  location_id       String
  customer_id       String

  location Location @relation(fields: [location_id], references: [location_id])
  customer Customer @relation(fields: [customer_id], references: [customer_id])
}

model Customer {
  customer_id String @id @default(uuid())
  user_id     String @unique
  payment_id  String

  user    User     @relation(fields: [user_id], references: [id])
  payment Payment  @relation(fields: [payment_id], references: [payment_id])
  Orders  Orders[]
}

model Payment {
  payment_id         String   @id @default(uuid())
  payment_numbers    Int
  payment_expiration DateTime
  payment_CVV        Int

  Customer Customer[]
}

model ServiceTypes {
  service_type_id String      @id @default(uuid())
  service_name    String
  promotion       Promotions?
}

model ServiceImages {
  service_image_id  String @id @default(uuid())
  service_image_url String
  service_id        String

  service Service @relation(fields: [service_id], references: [service_id])
}

model Promotions {
  promotion_id          String       @id @default(uuid())
  promotion_percent     Int
  promotion_description String
  service_type_id       String       @unique
  serviceType           ServiceTypes @relation(fields: [service_type_id], references: [service_type_id])
}

model Menu {
  menu_id    String    @id @default(uuid())
  menu_item  String
  menu_price String
  Service    Service[]
}
