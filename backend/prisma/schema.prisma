generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id             String         @id @default(uuid())
  email          String         @unique
  username       String         @unique
  createdAt      DateTime       @default(now())
  profilePicture String
  password       String?
  phoneNumber    String?        @unique
  firstName      String
  lastName       String
  RefreshToken   RefreshToken[]
  Comment        Comment[]
  CommentLikes   CommentLikes[]
  ServiceProvider ServiceProvider?
  PostLike       PostLike[]
}

model RefreshToken {
  id        String   @id @default(uuid())
  userId    String
  token     String   @unique
  createdAt DateTime @default(now())
  expiresAt DateTime
  user      User     @relation(fields: [userId], references: [id])
}

model Service {
  id                   String   @id @default(uuid())
  service_name         String
  location_id          String
  service_description  String
  service_type_id      String
  service_price        String
  service_availibility DateTime
  service_license      String
  service_images       String
  provider_id          String
  menu_id              String

  serviceImages ServiceImages[]
  menu Menu @relation((fields: [menu_id], references: [menu_id]))
}

model ServiceProvider {
  provider_id      String @id @default(uuid())
  user_id          String @unique
  provider_name    String
  provider_email   String
  provider_contact String
  provider_rating  Int
  location_id      String

  user     User     @relation(fields: [user_id], references: [id])
  location Location @relation(fields: [location_id], references: [location_id])
}

model Location {
  location_id      String @id @default(uuid())
  location_address String
  location_city    String
  location_zip     Int
  location_country String
  location_state   String

  ServiceProvider ServiceProvider[]
  Orders          Orders[]
}

model Orders {
  order_id          String @id @default(uuid())
  order_description String
  order_price       String
  order_list        String
  order_status      String
  location_id       String
  customer_id       String

  location Location @relation(fields: [location_id], references: [location_id])
  customer Customer @relation(fields: [customer_id], references: [customer_id])
}

model Post {
  id           String     @id @default(uuid())
  post_content String
  post_time    DateTime
  user_id      String
  post_status  String
  caption      String?
  post_privacy String
  Comment      Comment[]
  PostLike     PostLike[]
}

model Customer {
  customer_id String @id @default(uuid())
  user_id     String @unique
  payment_id  String

  user    User     @relation(fields: [user_id], references: [id])
  payment Payment  @relation(fields: [payment_id], references: [payment_id])
  Orders  Orders[]
}

model Payment {
  payment_id         String   @id @default(uuid())
  payment_numbers    Int
  payment_expiration DateTime
  payment_CVV        Int

  Customer Customer[]
}

model ServiceTypes {
  service_type_id String      @id @default(uuid())
  service_name    String
  promotion       Promotions?
}

model ServiceImages {
  service_image_id  String @id @default(uuid())
  service_image_url String
  service_id        String

  service Service @relation(fields: [service_id], references: [service_id])
}

model Promotions {
  promotion_id          String       @id @default(uuid())
  promotion_percent     Int
  promotion_description String
  service_type_id       String       @unique
  serviceType           ServiceTypes @relation(fields: [service_type_id], references: [service_type_id])
}

model Menu {
  menu_id    String    @id @default(uuid())
  menu_item  String
  menu_price String
  Service    Service[]
}

model Comment {
  id           String @id @default(uuid())
  post_id      String
  post_content String
  user_id      String
  post_status  String
  caption      String
  post_privacy String

  post         Post           @relation(fields: [post_id], references: [id])
  user         User           @relation(fields: [user_id], references: [id])
  CommentLikes CommentLikes[]
}

model CommentLikes {
  id         String @id @default(uuid())
  comment_id String
  user_id    String

  comment Comment @relation(fields: [comment_id], references: [id])
  user    User    @relation(fields: [user_id], references: [id])
}

model PostLike {
  id      String @id @default(uuid())
  post_id String
  user_id String

  user User @relation(fields: [user_id], references: [id])
  post Post @relation(fields: [post_id], references: [id])
}
